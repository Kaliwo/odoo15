# -*- coding: utf-8 -*-
#############################################################################
#
#    Cybrosys Technologies Pvt. Ltd.
#
#    Copyright (C) 2022-TODAY Cybrosys Technologies(<https://www.cybrosys.com>)
#    Author: Cybrosys Techno Solutions(<https://www.cybrosys.com>)
#
#    You can modify it under the terms of the GNU LESSER
#    GENERAL PUBLIC LICENSE (LGPL v3), Version 3.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU LESSER GENERAL PUBLIC LICENSE (LGPL v3) for more details.
#
#    You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
#    (LGPL v3) along with this program.
#    If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
import base64
from io import BytesIO
import datetime
import qrcode
from odoo import models, fields, api


class Patient(models.Model):
    _name = 'hospital.appointment'
    _description = 'Appointment'
    _rec_name = 'appointment_seq'

    patient_name = fields.Many2one('res.partner','Patient')
    phone = fields.Char('Phone Number')
    email = fields.Char('Email')
    patient_id = fields.Integer('Patient ID')
    appointment_date = fields.Date('Appointment Date',
                                   default=datetime.datetime.now())
    appointment_seq = fields.Char(string='Appointment Sequence', required=True,
                                  copy=False,
                                  readonly=True, index=True,
                                  default=lambda self: 'New')

    gender = fields.Selection([('male', 'Male'), ('female', 'Female'),
                               ('other', 'Other')], string="Gender")
    age = fields.Integer('Age')
    address = fields.Text('Address')
    doc_id = fields.Many2one('hr.employee', 'Doctor',
                             domain="[('is_doctor','=','doctor')]",
                             help="The doctor which is consult to the patient")
    user_id = fields.Many2one('res.users', copy=False, tracking=True,
                              string='Responsible',
                              default=lambda self: self.env.user)
    time = fields.Float(' Time (in hours )')
    state = fields.Selection([('draft', 'Draft'), ('approval', 'Approved'),
                              ('cancel', 'Cancel'), ],
                             string='State', readonly=True,
                             default="draft")
    pm = fields.Selection([('pm', 'PM'), ('am', 'AM')], string='AM/PM',
                          help="The tym identifying forenoon or afternoon")
    qr_code = fields.Binary("QR Code", attachment=False,
                            compute="_compute_qr_code",
                            help="The qr code generated by the details of "
                                 "patients")

    def _compute_qr_code(self):
        """used to generate qr code"""
        qr = qrcode.QRCode(
            version=None,
            error_correction=qrcode.constants.ERROR_CORRECT_M,
            box_size=3,
            border=3,
        )
        qr.add_data(self.appointment_seq)
        qr.make(fit=True)
        img = qr.make_image()
        temp = BytesIO()
        img.save(temp, format="PNG")
        qr_image = base64.b64encode(temp.getvalue())
        self.qr_code = qr_image
        return self.qr_code

    def action_appointment_sent(self):
        """Patients are confirm their appointments by sending mails to doctor"""
        template_id = self.env.ref(
            'hospital_appointments.appointment_approval_email_template').id
        self.env['mail.template'].browse(template_id).send_mail(self.id,
                                                                force_send=True)
        self.state = "approval"
        return

    def action_appointment_cancel(self):
        """Patients are confirm their appointments by sending mails to doctor"""
        template_id = self.env.ref(
            'hospital_appointments.appointment_cancel_email_template').id
        self.env['mail.template'].browse(template_id).send_mail(self.id,
                                                                force_send=True)
        self.state = "cancel"
        return

    @api.model
    def create(self, vals):
        """sequence generator"""
        if vals.get('appointment_seq', 'New') == 'New':
            vals['appointment_seq'] = self.env['ir.sequence'].next_by_code(
                'patients.appointment') or 'New'
        result = super(Patient, self).create(vals)
        return result
